package Vue;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import org.jdom2.JDOMException;

import javax.xml.parsers.ParserConfigurationException;
import java.text.ParseException;
import org.xml.sax.SAXException;
import java.sql.Time;

import Modele.Plan;
import Modele.Troncon;
import Modele.DemandeLivraison;
import Modele.ExceptionXML;
import Modele.Intersection;
import Modele.Livraison;
import Modele.XMLParser;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import controleur.Controleur;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.ParseException;
import javafx.scene.layout.StackPane;
import org.controlsfx.dialog.ExceptionDialog;
import controleur.commande.CommandeException;
import controleur.ControleurInterface;
import java.awt.Desktop;

import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
 
/**
 *
 * @author carhiliuc
 */
public class IHMLivraisons extends javax.swing.JDialog {

    Controleur controleur;
    /**
     * Creates new form IHMLivraisons
     */
    public IHMLivraisons(java.awt.Frame parent, boolean modal, Controleur controleur) {
        super(parent, modal);
        initComponents();
        this.controleur = controleur;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonChargerPlan = new javax.swing.JButton();
        jButtonValider = new javax.swing.JButton();
        jButtonViderDL = new javax.swing.JButton();
        jButtonChargerLivraison = new javax.swing.JButton();
        jButtonCalculerTournee = new javax.swing.JButton();
        jPanelPlanMap = new Vue.JPanelPlan();
        jLabelTitre = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableLivraisons = new javax.swing.JTable();
        jButtonModifier = new javax.swing.JButton();
        jButtonAnnulerModif = new javax.swing.JButton();
        jButtonAjouter = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaMessage = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPrecedent = new javax.swing.JTextField();
        jTextFieldAjouter = new javax.swing.JTextField();
        jTextFieldSupprimer = new javax.swing.JTextField();
        jButtonFeuilleDeRoute = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Système de livraison");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(null);
        setPreferredSize(new java.awt.Dimension(1242, 876));

        jButtonChargerPlan.setText("Charger Plan");
        jButtonChargerPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChargerPlanActionPerformed(evt);
            }
        });

        jButtonValider.setVisible(false);
        jButtonValider.setText("Valider");
        jButtonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderActionPerformed(evt);
            }
        });

        jButtonViderDL.setText("Vider Demande de Livraison");
        jButtonViderDL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViderDLActionPerformed(evt);
            }
        });

        jButtonChargerLivraison.setText("Charger Livraison");
        jButtonChargerLivraison.setEnabled(false);
        jButtonChargerLivraison.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChargerLivraisonActionPerformed(evt);
            }
        });

        jButtonCalculerTournee.setText("Calculer tournée");
        jButtonCalculerTournee.setEnabled(false);
        jButtonCalculerTournee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculerTourneeActionPerformed(evt);
            }
        });

        jPanelPlanMap.setBackground(new java.awt.Color(153, 153, 153));
        jPanelPlanMap.setAlignmentX(1.0F);
        jPanelPlanMap.setAlignmentY(1.0F);
        jPanelPlanMap.setPreferredSize(new java.awt.Dimension(551, 530));
        jPanelPlanMap.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanelPlanMapMouseMoved(evt);
            }
        });
        jPanelPlanMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelPlanMapMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlanMapLayout = new javax.swing.GroupLayout(jPanelPlanMap);
        jPanelPlanMap.setLayout(jPanelPlanMapLayout);
        jPanelPlanMapLayout.setHorizontalGroup(
            jPanelPlanMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );
        jPanelPlanMapLayout.setVerticalGroup(
            jPanelPlanMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
        );

        jLabelTitre.setFont(new java.awt.Font("Elephant", 0, 36)); // NOI18N
        jLabelTitre.setText(" Système de livraison");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Livraisons");

        jTableLivraisons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Adresse", "Duree", "Debut Plage", "Fin Plage", "H arrivé", "H départ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableLivraisons.getColumnModel().getColumn(1).setPreferredWidth(10);
        jTableLivraisons.getColumnModel().getColumn(1).setPreferredWidth(200);
        jTableLivraisons.getColumnModel().getColumn(2).setPreferredWidth(70);
        jTableLivraisons.getColumnModel().getColumn(3).setPreferredWidth(50);
        jTableLivraisons.getColumnModel().getColumn(4).setPreferredWidth(50);
        jScrollPane4.setViewportView(jTableLivraisons);

        jButtonModifier.setEnabled(false);
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonAnnulerModif.setVisible(false);
        jButtonAnnulerModif.setText("Annuler");
        jButtonAnnulerModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerModifActionPerformed(evt);
            }
        });

        jButtonAjouter.setVisible(false);
        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonSupprimer.setVisible(false);
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jTextAreaMessage.setEditable(false);
        jTextAreaMessage.setColumns(20);
        jTextAreaMessage.setRows(5);
        jScrollPane2.setViewportView(jTextAreaMessage);

        jLabel2.setText("Messages");

        jTextFieldPrecedent.setEnabled(false);
        jTextFieldPrecedent.setText("ID intersection précédente ");
        jTextFieldPrecedent.setPreferredSize(new java.awt.Dimension(200, 26));

        jTextFieldAjouter.setEnabled(false);
        jTextFieldAjouter.setText("ID intersection à ajouter");

        jTextFieldSupprimer.setEnabled(false);
        jTextFieldSupprimer.setText("ID intersection à supprimer");

        jButtonFeuilleDeRoute.setText("Generer feuille de route");
        jButtonFeuilleDeRoute.setEnabled(false);
        jButtonFeuilleDeRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFeuilleDeRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonViderDL, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCalculerTournee, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValider, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAnnulerModif, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldPrecedent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(36, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jButtonChargerPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonChargerLivraison, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(jButtonFeuilleDeRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanelPlanMap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(322, 322, 322)
                .addComponent(jLabelTitre)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTitre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonChargerPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonChargerLivraison, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jButtonFeuilleDeRoute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel2))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelPlanMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAnnulerModif, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonViderDL, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCalculerTournee, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonValider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPrecedent, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void jButtonChargerPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChargerPlanActionPerformed
        JFileChooser xml_map = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML Files", "xml");
        
        xml_map.setFileFilter(filter);
        Plan planDeVille = null;
        String exception="";
        JOptionPane jop; // fenetre d'alerte
        if (xml_map.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = xml_map.getSelectedFile();
            //Vérifier le format du fichier xml ou non
            if(filter.accept(selectedFile)==false){
                exception = "Format Fichier Plan Incorrect !";
                jop = new JOptionPane();
                jop.showMessageDialog(null, exception, "Attention", JOptionPane.WARNING_MESSAGE);
                return;
            }
            try {   
                planDeVille = controleur.parserPlan(selectedFile);
            } catch (Exception ex) {
                Logger.getLogger(IHMLivraisons.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        annulerDL(); 
        planActuel = planDeVille;
        jPanelPlanMap.setPlan(planDeVille);
        jPanelPlanMap.repaint();
        jButtonChargerLivraison.setEnabled(true);
    }//GEN-LAST:event_jButtonChargerPlanActionPerformed
    
    private void jButtonChargerLivraisonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChargerLivraisonActionPerformed
        annulerDL();
        jPanelPlanMap.setDL(DLActuelle);
        jPanelPlanMap.repaint();
        if (planActuel != null){
            JFileChooser xml_DL = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("XML Files", "xml");
            xml_DL.setFileFilter(filter);
            DemandeLivraison dl = null;
            String exception="";
            JOptionPane jop; // fenetre d'alerte
            if (xml_DL.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File selectedFile = xml_DL.getSelectedFile();
                
                if(filter.accept(selectedFile)==false){
                   exception = "Format Fichier Livraison Incorrect !";
                   jop = new JOptionPane();
                   jop.showMessageDialog(null, exception, "Attention", JOptionPane.WARNING_MESSAGE);
                   return;
                }
                try {
                    dl = controleur.parserLivraisons(selectedFile, planActuel);
                } catch (Exception ex) {
                    Logger.getLogger(IHMLivraisons.class.getName()).log(Level.SEVERE, null, ex);
                }
                annulerDL();
                
                DLActuelle = dl; 
                planActuel.setDL(dl);
                jPanelPlanMap.setPlan(planActuel);
                jPanelPlanMap.setDL(DLActuelle);
                jPanelPlanMap.repaint();
                
                jButtonCalculerTournee.setEnabled(true);
                
                //Remplissage du tableau
                Collection<Livraison> livraisoncollection = dl.getLivraison().values();
                
                //1er ligne 1er colonne : entrepot
                jTableLivraisons.getModel().setValueAt("E", 0, 0);
                //1er ligne 2e colonne : adresse de l'entrepot
                jTableLivraisons.getModel().setValueAt(
                        dl.getEntrepot().getTroncons().get(0).getNomRue() + 
                                " (" + dl.getEntrepot().getId() + ")", 0, 1);
                
                int indexRow=1;
                for(Livraison livraison :livraisoncollection ){
                    //1er colonne : n°
                    jTableLivraisons.getModel().setValueAt(indexRow, indexRow, 0);
                    
                    //2e colonne : adresse
                    String nomRue = livraison.getAdresse().getTroncons().get(0).getNomRue();
                    Long idAdresse = livraison.getAdresse().getId();
                    jTableLivraisons.getModel().setValueAt(nomRue + " (" + idAdresse + ")", indexRow, 1);
                    
                    //3e colonne : durée
                    String dureeFormatee = "";
                    int seconds = livraison.getDuree() % 60;
                    int totalMinutes = livraison.getDuree() / 60;
                    int minutes = totalMinutes % 60;
                    int hours = totalMinutes / 60;
                    
                    if(hours >0){
                        dureeFormatee += hours + "h ";
                    }
                    if(minutes >0){
                        dureeFormatee += minutes + "min ";
                    }
                    if(seconds >0){
                        dureeFormatee += seconds + "s";
                    }
                    jTableLivraisons.getModel().setValueAt(dureeFormatee, indexRow, 2);
                    
                    if (livraison.getDebutPlage() != null){
                        //4e et 5e colonne : début et fin de plage
                        jTableLivraisons.getModel().setValueAt(livraison.getDebutPlage().toString(), indexRow, 3);
                        jTableLivraisons.getModel().setValueAt(livraison.getFinPlage().toString(), indexRow, 4);
                    }
                    indexRow++;
                }
            }  
        }
    }//GEN-LAST:event_jButtonChargerLivraisonActionPerformed
     
    private void jButtonCalculerTourneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculerTourneeActionPerformed
      
        solutionActuelle = controleur.calculTournee(planActuel);
        
        List<Time[]> heures = controleur.calculDuree(planActuel);

        // Affichage de la solution
        jPanelPlanMap.setSolution(solutionActuelle);
        jPanelPlanMap.repaint();   
                
        //vide le tableau
        DefaultTableModel model = (DefaultTableModel) jTableLivraisons.getModel();
        int rowCount = model.getRowCount();
        String setvide="";
        for (int i = 0; i < rowCount ; i++){
            jTableLivraisons.getModel().setValueAt(setvide, i, 0);
            jTableLivraisons.getModel().setValueAt(setvide, i, 1);
            jTableLivraisons.getModel().setValueAt(setvide, i, 2);
            jTableLivraisons.getModel().setValueAt(setvide, i, 3);
            jTableLivraisons.getModel().setValueAt(setvide, i, 4);    
            jTableLivraisons.getModel().setValueAt(setvide, i, 5); 
            jTableLivraisons.getModel().setValueAt(setvide, i, 6); 
        }
        int indexRow=0;
        
        //Affiche le nouveau tableau
        for(ArrayList<Intersection> inter : solutionActuelle){
            Livraison livraison = DLActuelle.getLivraison().get(inter.get(0).getId());
            
            //Si l'intersection dans solution n'est pas une livraison, alors c'est l'entrepot
            if(livraison == null){
                //1er colonne : E pour entrepot
                jTableLivraisons.getModel().setValueAt("E", indexRow, 0);
                //2e colonne : adresse
                jTableLivraisons.getModel().setValueAt(
                        inter.get(0).getTroncons().get(0).getNomRue() + 
                                " (" + inter.get(0).getId() + ")", 0, 1);
                //6e et 7e colonne : heure arrivé et départ
                jTableLivraisons.getModel().setValueAt(heures.get(indexRow)[0].toString(), indexRow, 5);
                jTableLivraisons.getModel().setValueAt(heures.get(indexRow)[1].toString(), indexRow, 6);
            }else{
                //1er colonne : n°
                jTableLivraisons.getModel().setValueAt(indexRow, indexRow, 0);
                
                //2e colonne : adresse
                String nomRue = livraison.getAdresse().getTroncons().get(0).getNomRue();
                Long idAdresse = livraison.getAdresse().getId();
                jTableLivraisons.getModel().setValueAt(nomRue + " (" + idAdresse + ")", indexRow, 1);

                //3e colonne : durée
                String dureeFormatee = "";
                int seconds = livraison.getDuree() % 60;
                int totalMinutes = livraison.getDuree() / 60;
                int minutes = totalMinutes % 60;
                int hours = totalMinutes / 60;

                if(hours >0){
                    dureeFormatee += hours + "h ";
                }
                if(minutes >0){
                    dureeFormatee += minutes + "min ";
                }
                if(seconds >0){
                    dureeFormatee += seconds + "s";
                }
                jTableLivraisons.getModel().setValueAt(dureeFormatee, indexRow, 2);

                if (livraison.getDebutPlage() != null){
                    //4e et 5e colonne : début et fin de plage
                    jTableLivraisons.getModel().setValueAt(livraison.getDebutPlage().toString(), indexRow, 3);
                    jTableLivraisons.getModel().setValueAt(livraison.getFinPlage().toString(), indexRow, 4);
                }
                //6e et 7e colonne : heure arrivé et départ
                jTableLivraisons.getModel().setValueAt(heures.get(indexRow)[0].toString(), indexRow, 5);
                jTableLivraisons.getModel().setValueAt(heures.get(indexRow)[1].toString(), indexRow, 6);
            }
            indexRow++;
        }
        
        jButtonFeuilleDeRoute.setEnabled(true);
        jButtonModifier.setEnabled(true);
        jButtonAjouter.setVisible(true);
        jButtonAjouter.setEnabled(false);
        jButtonSupprimer.setVisible(true);
        jButtonSupprimer.setEnabled(false);
        jButtonValider.setVisible(true);
        jButtonValider.setEnabled(false);
        jButtonAnnulerModif.setVisible(true);
        jButtonAnnulerModif.setEnabled(false);
    }//GEN-LAST:event_jButtonCalculerTourneeActionPerformed

    private void jButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderActionPerformed
        jButtonAjouter.setEnabled(false);
        jButtonSupprimer.setEnabled(false);
        jButtonValider.setEnabled(false);
        jButtonAnnulerModif.setEnabled(false);
        jButtonFeuilleDeRoute.setEnabled(true);
        jTextFieldPrecedent.setEnabled(false);
        jTextFieldAjouter.setEnabled(false);
        jTextFieldSupprimer.setEnabled(false);

    }//GEN-LAST:event_jButtonValiderActionPerformed

    private void annulerDL(){
        DefaultTableModel model = (DefaultTableModel) jTableLivraisons.getModel();
        int rowCount = model.getRowCount();
        String vide="";
        for (int i = 0; i < rowCount ; i++){
            jTableLivraisons.getModel().setValueAt(vide, i, 0);
            jTableLivraisons.getModel().setValueAt(vide, i, 1);
            jTableLivraisons.getModel().setValueAt(vide, i, 2);
            jTableLivraisons.getModel().setValueAt(vide, i, 3);
            jTableLivraisons.getModel().setValueAt(vide, i, 4);
            jTableLivraisons.getModel().setValueAt(vide, i, 5);
            jTableLivraisons.getModel().setValueAt(vide, i, 6);
                    
        }
        DLActuelle=null;
        solutionActuelle=null;
        jButtonCalculerTournee.setEnabled(false);
        jButtonFeuilleDeRoute.setEnabled(false);
         
    }
    private void jButtonViderDLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViderDLActionPerformed
        annulerDL();
        jPanelPlanMap.setDL(DLActuelle);
        jPanelPlanMap.setSolution(solutionActuelle);
        jPanelPlanMap.repaint();
    }//GEN-LAST:event_jButtonViderDLActionPerformed

    private void jButtonFeuilleDeRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFeuilleDeRouteActionPerformed
                                                             
        Document document = new Document();
        String yourPdfName = "";
        try {
            try {
                yourPdfName = (String) JOptionPane.showInputDialog("Nom fichier:");
                if (!(yourPdfName.endsWith(".pdf"))) {
                    yourPdfName += ".pdf";
                }
                PdfWriter.getInstance(document, new FileOutputStream(yourPdfName));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(IHMLivraisons.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (DocumentException ex) {
            Logger.getLogger(IHMLivraisons.class.getName()).log(Level.SEVERE, null, ex);
        }
        document.open();
        Font font20 = new Font(FontFamily.TIMES_ROMAN, 20);
        Font font12 = new Font(FontFamily.TIMES_ROMAN, 12);

        try {
            document.add(new Paragraph("ENTREPOT :" + solutionActuelle.get(0).get(0).getTroncons().get(0).getNomRue(), font20));
            String text = "";
            for (ArrayList<Intersection> i : solutionActuelle) {

                for (Intersection j : i) {

                    String nomRue = j.getTroncons().get(0).getNomRue();
                    // String debutPlage=j.
                    text = text.concat(nomRue + "--->");
                }

                Livraison livraison = DLActuelle.getLivraison().get(i.get(0).getId());
                System.out.println(livraison);
                if (livraison != null) {
                    String debutPlage = livraison.getDebutPlage().toString();
                    String finPlage = livraison.getFinPlage().toString();
                    String adresse = livraison.getAdresse().getTroncons().get(0).getNomRue();
                    document.add(new Paragraph("Livraison : " + adresse, font20));
                    document.add(new Paragraph("Plage horaire : [" + debutPlage + " - " + finPlage + "]\n", font20));
                    document.add(new Paragraph("Trajet vers la livraison suivante", font20));
                } else {
                    document.add(new Paragraph("Trajet de l'entropot vers 1ére adresse", font20));
                }
                document.add(new Paragraph(text, font12));

            }
            document.add(new Paragraph("ENTREPOT :" + solutionActuelle.get(0).get(0).getTroncons().get(0).getNomRue(), font20));
        } catch (DocumentException ex) {
            Logger.getLogger(IHMLivraisons.class.getName()).log(Level.SEVERE, null, ex);
        }
        document.close();

        try {
            Desktop.getDesktop().open(new File(yourPdfName));
        } catch (IOException ex) {
            Logger.getLogger(IHMLivraisons.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("done");
    }//GEN-LAST:event_jButtonFeuilleDeRouteActionPerformed

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        Intersection interAdd = null;
        Intersection interPrec = null;
        
        String sAdd = jTextFieldAjouter.getText();
        if(!sAdd.contains("ID intersection à ajouter") && !sAdd.isEmpty()){
            long idAdd = Long.valueOf(sAdd);
            interAdd = planActuel.getIntersectionsMap().get(idAdd);
        } else {
            interAdd = planActuel.getIntersectionsList().get(2);
        }
        
        String sPrec = jTextFieldPrecedent.getText();
        if(!sPrec.contains("ID intersection précédente") && !sPrec.isEmpty()){
            long idPrec = Long.valueOf(sPrec);
            interPrec = planActuel.getIntersectionsMap().get(idPrec);
        } else {
            interPrec = planActuel.getAdresseDeLivraison(0);
        }

        planActuel.addLivraison(interPrec, interAdd);
        List<ArrayList<Intersection>> solution = planActuel.getSolution2();
        solutionActuelle = solution;
        
        System.out.println("Solutions : ");
        for (int j=0; j<solution.size(); j++){
            System.out.println(solution.get(j).get(0).toString());
        }

        // Affichage de la solution
        jPanelPlanMap.setSolution(solution);
        jPanelPlanMap.repaint();   
                
        //vide le tableau
        DefaultTableModel model = (DefaultTableModel) jTableLivraisons.getModel();
        int rowCount = model.getRowCount();
        String setvide="";
        for (int i = 0; i < rowCount ; i++){
            jTableLivraisons.getModel().setValueAt(setvide, i, 0);
            jTableLivraisons.getModel().setValueAt(setvide, i, 1);
            jTableLivraisons.getModel().setValueAt(setvide, i, 2);
            jTableLivraisons.getModel().setValueAt(setvide, i, 3);
            jTableLivraisons.getModel().setValueAt(setvide, i, 4);          
        }
        int indexRow=0;
        
        //Affiche le nouveau tableau
        for(ArrayList<Intersection> inter : solutionActuelle){
            Livraison livraison = DLActuelle.getLivraison().get(inter.get(0).getId());
            
            if(livraison == null){
                //Si l'intersection dans solution n'est pas une livraison, alors c'est l'entrepot
                if( inter.get(0).getId() != interAdd.getId()){
                    //1er colonne : E pour entrepot
                    jTableLivraisons.getModel().setValueAt("E", indexRow, 0);
                    //2e colonne : adresse
                    jTableLivraisons.getModel().setValueAt(
                            inter.get(0).getTroncons().get(0).getNomRue() + 
                            " (" + inter.get(0).getId() + ")", 0, 1); 
                }else{//ou la nouvelle intersection
                   //1er colonne : n°
                    jTableLivraisons.getModel().setValueAt(indexRow, indexRow, 0);

                    //2e colonne : adresse
                    String nomRue = inter.get(0).getTroncons().get(0).getNomRue();
                    Long idAdresse = inter.get(0).getId();
                    jTableLivraisons.getModel().setValueAt(nomRue + " (" + idAdresse + ")", indexRow, 1);
                    
                    //3e colonne : durée fixe
                    jTableLivraisons.getModel().setValueAt("10min", indexRow, 2);
                }
            }else{
                //1er colonne : n°
                jTableLivraisons.getModel().setValueAt(indexRow, indexRow, 0);
                
                //2e colonne : adresse
                String nomRue = livraison.getAdresse().getTroncons().get(0).getNomRue();
                Long idAdresse = livraison.getAdresse().getId();
                jTableLivraisons.getModel().setValueAt(nomRue + " (" + idAdresse + ")", indexRow, 1);

                //3e colonne : durée
                String dureeFormatee = "";
                int seconds = livraison.getDuree() % 60;
                int totalMinutes = livraison.getDuree() / 60;
                int minutes = totalMinutes % 60;
                int hours = totalMinutes / 60;

                if(hours >0){
                    dureeFormatee += hours + "h ";
                }
                if(minutes >0){
                    dureeFormatee += minutes + "min ";
                }
                if(seconds >0){
                    dureeFormatee += seconds + "s";
                }
                jTableLivraisons.getModel().setValueAt(dureeFormatee, indexRow, 2);

                if (livraison.getDebutPlage() != null){
                    //4e et 5e colonne : début et fin de plage
                    jTableLivraisons.getModel().setValueAt(livraison.getDebutPlage().toString(), indexRow, 3);
                    jTableLivraisons.getModel().setValueAt(livraison.getFinPlage().toString(), indexRow, 4);
                }
            }
            indexRow++;
        }

    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
//       long IDsupr = Long.valueOf(jTextFieldSupprimer.getText());
//       Intersection iSupr = planActuel.getIntersectionsMap().get(IDsupr);
        if (!planActuel.getLivraisons().isEmpty()){
            Intersection interSup = null;

            String sSup = jTextFieldSupprimer.getText();
            if(!sSup.contains("ID intersection à ajouter") && !sSup.isEmpty()){
                long idSup = Long.valueOf(sSup);
                interSup = planActuel.getIntersectionsMap().get(idSup);
            } else {
                interSup = planActuel.getAdresseDeLivraison(0);
            }
            
            planActuel.deleteLivraison(interSup);
        
            List<ArrayList<Intersection>> solution = planActuel.getSolution2();
            solutionActuelle = solution;


            // Affichage de la solution
            jPanelPlanMap.setSolution(solution);
            jPanelPlanMap.repaint();   

            //vide le tableau
            DefaultTableModel model = (DefaultTableModel) jTableLivraisons.getModel();
            int rowCount = model.getRowCount();
            String setvide="";
            for (int i = 0; i < rowCount ; i++){
                jTableLivraisons.getModel().setValueAt(setvide, i, 0);
                jTableLivraisons.getModel().setValueAt(setvide, i, 1);
                jTableLivraisons.getModel().setValueAt(setvide, i, 2);
                jTableLivraisons.getModel().setValueAt(setvide, i, 3);
                jTableLivraisons.getModel().setValueAt(setvide, i, 4);
                jTableLivraisons.getModel().setValueAt(setvide, i, 5);
                jTableLivraisons.getModel().setValueAt(setvide, i, 6);   
            }
            int indexRow=0;
    //        System.out.println(DLActuelle);

            //Affiche le nouveau tableau
            for(ArrayList<Intersection> inter : solution){
                Livraison livraison = DLActuelle.getLivraison().get(inter.get(0).getId());

                //Si l'intersection dans solution n'est pas une livraison, alors c'est l'entrepot
                if(livraison == null){
                    //1er colonne : E pour entrepot
                    jTableLivraisons.getModel().setValueAt("E", indexRow, 0);
                    //2e colonne : adresse
                    jTableLivraisons.getModel().setValueAt(
                            inter.get(0).getTroncons().get(0).getNomRue() + 
                                    " (" + inter.get(0).getId() + ")", 0, 1);
                }else{
                    //1er colonne : n°
                    jTableLivraisons.getModel().setValueAt(indexRow, indexRow, 0);

                    //2e colonne : adresse
                    String nomRue = livraison.getAdresse().getTroncons().get(0).getNomRue();
                    Long idAdresse = livraison.getAdresse().getId();
                    jTableLivraisons.getModel().setValueAt(nomRue + " (" + idAdresse + ")", indexRow, 1);

                    //3e colonne : durée
                    String dureeFormatee = "";
                    int seconds = livraison.getDuree() % 60;
                    int totalMinutes = livraison.getDuree() / 60;
                    int minutes = totalMinutes % 60;
                    int hours = totalMinutes / 60;

                    if(hours >0){
                        dureeFormatee += hours + "h ";
                    }
                    if(minutes >0){
                        dureeFormatee += minutes + "min ";
                    }
                    if(seconds >0){
                        dureeFormatee += seconds + "s";
                    }
                    jTableLivraisons.getModel().setValueAt(dureeFormatee, indexRow, 2);

                    if (livraison.getDebutPlage() != null){
                        //4e et 5e colonne : début et fin de plage
                        jTableLivraisons.getModel().setValueAt(livraison.getDebutPlage().toString(), indexRow, 3);
                        jTableLivraisons.getModel().setValueAt(livraison.getFinPlage().toString(), indexRow, 4);
                    }
                }
                indexRow++;
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        jButtonAjouter.setEnabled(true);
        jButtonSupprimer.setEnabled(true);
        jButtonValider.setEnabled(true);
        //mettre à true quand on pourra annuler
        jButtonAnnulerModif.setEnabled(false);
        jButtonFeuilleDeRoute.setEnabled(false);
        jTextFieldPrecedent.setEnabled(true);
        jTextFieldAjouter.setEnabled(true);
        jTextFieldSupprimer.setEnabled(true);
        
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonAnnulerModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerModifActionPerformed
        jButtonAjouter.setEnabled(false);
        jButtonSupprimer.setEnabled(false);
        jButtonValider.setEnabled(false);
        jButtonAnnulerModif.setEnabled(false);
        jButtonFeuilleDeRoute.setEnabled(true);
    }//GEN-LAST:event_jButtonAnnulerModifActionPerformed

    private void jPanelPlanMapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelPlanMapMouseClicked
        // TODO add your handling code here:
        double X= evt.getLocationOnScreen().x;
        double Y= evt.getLocationOnScreen().y;
        System.out.println(X);
        System.out.println(Y);
        
        long idIntersection = jPanelPlanMap.estSurIntersection(X, Y);
                if (idIntersection == -1) {
                    return;
                }else {System.out.println(idIntersection);}
    }//GEN-LAST:event_jPanelPlanMapMouseClicked

    private void jPanelPlanMapMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelPlanMapMouseMoved
        // TODO add your handling code here:
        double X= evt.getLocationOnScreen().x;
        double Y= evt.getLocationOnScreen().y;
        
        Livraison l = jPanelPlanMap.estSurLivraison(X, Y);
            if (l == null) {
                jPanelPlanMap.desactiverSurbrillance();
                return;
            }

            jPanelPlanMap.surbrillanceLivraison(l);
    }//GEN-LAST:event_jPanelPlanMapMouseMoved

 /**
     * Ouvre une boîte de dialogue d'exception modale afin de signalier à
     * l'utilisateur une erreur avec un fichier XML
     *
     * @param message Le message à afficher
     * @param fichier Le nom du fichier qui a généré l'erreur
     */
    private void ouvrirErreurFichier(Exception message, String fichier) {

//        ExceptionDialog exceptionDialog = new ExceptionDialog(message);
//        exceptionDialog.setTitle("Erreur");
//        exceptionDialog.setHeaderText("Problème avec le fichier : " + "'" + fichier + "'");
//        exceptionDialog.setWidth(250);
//        exceptionDialog.setHeight(450);
//        exceptionDialog.setResizable(false);
        //exceptionDialog.initOwner(groupEllipseVueGraphique.getScene().getWindow());
         String title ="Problème avec le fichier : " + "'" + fichier + "'";
        JOptionPane.showMessageDialog(null, message.getMessage(), title, JOptionPane.ERROR_MESSAGE);
        

        //exceptionDialog.showAndWait();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IHMLivraisons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IHMLivraisons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IHMLivraisons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IHMLivraisons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IHMLivraisons dialog = new IHMLivraisons(new javax.swing.JFrame(), true, new Controleur());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    } 
    
    private Plan planActuel;
    private DemandeLivraison DLActuelle;
    private List<ArrayList<Intersection>> solutionActuelle;
    // /!\ IMPORTANT : changer private javax.swing.JPanel jPanelPlanMap; en private JPanelPlan jPanelPlanMap;
    // netBeans va essayer de le changer
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonAnnulerModif;
    private javax.swing.JButton jButtonCalculerTournee;
    private javax.swing.JButton jButtonChargerLivraison;
    private javax.swing.JButton jButtonChargerPlan;
    private javax.swing.JButton jButtonFeuilleDeRoute;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonValider;
    private javax.swing.JButton jButtonViderDL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelTitre;
    private JPanelPlan jPanelPlanMap;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableLivraisons;
    private javax.swing.JTextArea jTextAreaMessage;
    private javax.swing.JTextField jTextFieldAjouter;
    private javax.swing.JTextField jTextFieldPrecedent;
    private javax.swing.JTextField jTextFieldSupprimer;
    // End of variables declaration//GEN-END:variables
}
